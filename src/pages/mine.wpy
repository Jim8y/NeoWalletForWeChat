<style lang="less">
.bg {
  background: linear-gradient(to right, #69c0fd, #a6a4fd);
}

.area-user {
  display: flex;
  flex-direction: column;
  align-items: center;
  .avatar {
    width: 163rpx;
    height: 163rpx;
    margin-top: 101rpx;
    border-radius: 50%;
    background-color: white;
  }
  .nickName {
    font-family: '黑体', Helvetica;
    font-size: 16px;
    margin-top: 45rpx;
    color: white;
  }
}

.area-text {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 660rpx;
  margin-top: 63rpx;
}
.area-text-item {
  display: flex;
  flex-direction: row;
  align-items: flex-end;
  width: 100%;
  padding-bottom: 15rpx;
  padding-top: 15rpx;
  border-bottom: thin solid #dddddd;
  justify-content: center;
}
.text-label {
  flex: 2.5;
  font-size: 16px;
  font-family: '黑体';
  padding-left: 5px;
  color: white;
  justify-content: flex-end;
  line-height: 47rpx;
}
.text-content {
  flex: 8;
  font-size: 15px;
  font-family: Arial, Helvetica, sans-serif;
  word-break: break-all;
  color: white;
  line-height: 47rpx;
  align-items: flex-end;
}
.area-lower {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 660rpx;
  margin-top: 145rpx;
}

.button-item {
  width: 660rpx;
  height: 95rpx;
  background-color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
  border-radius: 5px;
  justify-content: center;
  margin-bottom: 100rpx;
  box-shadow: 2px 2px 20px rgba(130, 130, 130, 0.2);
  .name {
    color: #a3a3a3;
    font-family: '黑体';
    font-size: 16px;
  }
}
</style>

<template>
  <view class="container bg">
    <scroll-view scroll-y class="scroll">
      <view class="inner">
        <view class= "area-user">
          <image class="avatar" src="{{avatarUrl}}"></image>
          <text class="nickName">{{nickName}}</text>
        </view>
  
        <view class="area-text">
          <view class="area-text-item"  @tap="copyToClip({{account.label}})">
            <text class="text-label" >账户名</text>
            <text class="text-content" >{{account.label}}</text>
          </view>
          <view class="area-text-item"  @tap="copyToClip({{account.address}})">
            <text class="text-label">地址</text>
            <text class="text-content">{{account.address}}</text>
          </view>
          <view class="area-text-item"  @tap="copyToClip({{account.publickey}})">
            <text class="text-label">公钥</text>
            <text class="text-content">{{account.publickey}}</text>
          </view>
          <view class="area-text-item"  @tap="copyToClip({{account.nep2key}})">
            <text class="text-label">私钥{{(account.key.length===64)?'':'密文'}}</text>
            <text class="text-content">{{account.nep2key}}</text>
          </view>
        </view>

        <view class="area-lower">
          <view class="button-item" @tap="manage()" >
            <text class="name" >账户管理</text>
          </view>
        </view>
      </view>
    </scroll-view>
  </view>
</template>
<script>
import wepy from 'wepy';
import { Wallet } from '../utils/wallet';
import { USER_INFO, CURR_WALLET } from '../utils/constant';
import tip from '../utils/tip';

export default class Mine extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} // 自定义方法

  onLoad() {
    let userInfo = wepy.getStorageSync(USER_INFO);
    this.avatarUrl = userInfo.avatarUrl;
    this.nickName = userInfo.nickName;
    this.$apply();
  } // 在Page和Component共用的生命周期函数

  onShow() {
    this.account = Wallet.account;
    this.$apply();
    console.log(this.account);
  } // 只在Page中存在的页面生命周期函数
  onReady() {
    this.$apply();
  }
  config = {
    navigationBarTitleText: '个人'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    account: {},
    avatarUrl: '',
    nickName: ''
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {}; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    copyToClip(str) {
      let that = this;
      wepy.setClipboardData({
        data: str,
        success: function(res) {
          wepy.getClipboardData({
            success: function(res) {
              console.log(res.data); // data
              tip.success('复制成功', 500);
            }
          });
        }
      });
    },
    manage() {
      let that = this;
      wx.showActionSheet({
        itemList: ['重命名', '切换账户', '观察模式', '删除账户'],
        itemColor: '#69c0fd',
        success(res) {
          if (res.tapIndex === 0) {
            wx.showToast({ title: '开发中' });
          } else if (res.tapIndex === 1) {
            wx.navigateTo({ url: './index?switch=' + 1 });
          } else if (res.tapIndex === 2) {
            wx.navigateTo({ url: './watchonly' });
          } else if (res.tapIndex === 3) {
            wx.showModal({
              title: '提示',
              content: '账户删除后只能通过重新导入来恢复',
              showCancel: true,
              success: res => {
                //确认删除
                if (res.confirm) {
                  Wallet.removeWallet();
                  wx.navigateBack();
                } else if (res.cancel) {
                }
              },
              fail: res => {
                reject(payload);
              }
            });
          }
        }
      });
    },
    logout() {
      wepy.reLaunch({ url: './login' });
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数
}
</script>
