<style lang="less">
.asset {
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin-top: 1rpx;
  background-color: white;
  .left {
    display: flex;
    flex-direction: row;
    align-items: center;
    .icon {
      width: 56rpx;
      height: 56rpx;
      border-radius: 50rpx;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-around;
      border: thin solid #f5f5f5;
      margin: 40rpx 32rpx 40rpx 30rpx;
      image {
        width: 37rpx;
        height: 37rpx;
      }
    }

    .coin {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      .name {
        font-family: PingFangSC-Medium;
        font-size: 16px;
        color: #333333;
        letter-spacing: 0;
        text-align: center;
        line-height: 16px;
      }
      .amount {
        display: flex;
        align-items: center;
        flex-direction: row;
        margin-top: 10rpx;
        text {
          font-family: PingFangSC-Regular;
          font-size: 10px;
          color: #9a9a9a;
          letter-spacing: 0;
          line-height: 10px;
        }
      }
    }
  }
  .switch-btn {
    background: #22a4ff;
    border-radius: 3px;
    margin-right: 30rpx;
    height: 48rpx;
    display: flex;
    flex-direction: row;
    align-items: center;

    text {
      width: 120rpx;
      font-family: PingFangSC-Medium;
      font-size: 14px;
      color: #ffffff;
      letter-spacing: 0;
      text-align: center;
      line-height: 14px;
    }
  }
}
.area-address {
  display: flex;
  flex-direction: row;
  width: 100%;
  align-items: center;
  height: 104rpx;
  margin-top: 20rpx;
  .text {
    font-family: PingFangSC-Regular;
    font-size: 12px;
    color: #9a9a9a;
    letter-spacing: 0;
    line-height: 12px;
    margin-left: 30rpx;
    align-content: center;
  }

  .right {
    .icon {
      image {
      }
    }
  }
}

.area-amount {
  display: flex;
  flex-direction: row;
  width: 100%;
  align-items: center;
  background-color: white;
  height: 104rpx;
  margin-top: 20rpx;
  .text {
    font-family: PingFangSC-Regular;
    font-size: 12px;
    color: #9a9a9a;
    letter-spacing: 0;
    line-height: 12px;
    margin-left: 30rpx;
    align-content: center;
  }
}
</style>
<template>
  <form bindsubmit="formSubmit" class="form" report-submit ="true">
    <view class="container">
    <scroll-view scroll-y class="scroll">
        <view class="inner">
          <view class="text-item">
            <view class="function-title">
              <text class="text">资产类型</text>
            </view>
            <view class="asset">
              <view class="left">
                <view class="icon"><image src="../images/neo.png" /></view>
                <view class="coin">
                  <text class="name">NEO</text>
                  <view class="amount">
                    <text>可用数量:</text>
                    <text style="color:#22A4FF;">98</text>
                  </view>
                </view>
              </view>
              <view class="switch-btn" @tap="changeCoin()"><text>更换</text></view>
            </view>
          </view>
        </view>
    </scroll-view>
    </view>
  </form>
</template>
<script>
import wepy from 'wepy';
import { Helper, ThinNeo, Neo } from '../lib/neo-ts/index';
import Util from '../utils/index';
export default class Send extends wepy.page {
  config = {
    navigationBarTitleText: '转账'
  };

  components = {};

  data = {
    targetAddr: '',
    assets: {}
  };

  computed = {};

  methods = {
    changeCoin() {},
    OnScan() {
      let that = this;
      wepy.scanCode({
        success: res => {
          console.log(res);
          that.targetAddr = res.result;
          that.$apply();
        },
        fail: res => {
          console.log(res);
        }
      });
    },
    radioChange(e) {
      this.checked = e.detail.value;
      this.balance = UTXO.balance[e.detail.value].amount;
      this.amount = '';
      this.$apply();
    },
    async formSubmit(e) {
      const that = this;
      let target = e.detail.value.address;
      let amount = e.detail.value.amount;
      let password = e.detail.value.passphrase;
      Util.set.formid(e.detail.formId);
      if (target.length !== 34) {
        Util.show.alert('目标地址有误');
        return;
      }
      if (parseFloat(amount) > parseFloat(UTXO.balance[this.checked].amount)) {
        Util.show.alert('余额不足');
        return;
      }
      if (password.length <= 0 && that.hidePW === 'false') {
        Util.show.alert('请输入密码');
        return;
      }

      this.amount = amount;
      this.hiddenmodalput = false;
      this.password = password;
      this.$apply();
      this.OnSend();
    }
  };

  events = {};

  onLoad() {
    try {
      this.balance = UTXO.balance['GAS'].amount;
      this.$apply();
    } catch (err) {
      console.log(err);
    }
  }
  onReady() {
    const that = this;
    if (Wallet.account.nep2key.length === 64) {
      that.hidePW = 'true';
      that.$apply();
    }
  }
  //构造并发送交易
  async OnSend() {
    let that = this;
    Util.loading('密码验证中');

    //如果当前账户直接使用私钥 
    if (Wallet.account.nep2key.length === 64) {
      //构造并发送交易
      that.SendTran(Wallet.account.nep2key, Wallet.account.publickey);
      return;
    }
    Wallet.decode(this.password, async (code, prikey, pubkey) => {
      wepy.hideLoading();
      if (code < 0) {
        Util.show.error('密码错误');
        return;
      }
      //构造并发送交易
      that.SendTran(prikey, pubkey);
    });
  }
  async SendTran(prikey, pubkey) {
    pubkey = Helper.hexToBytes(pubkey);
    var count = Neo.Fixed8.parse(this.amount + '');
    let coin = this.checked === 'GAS' ? Coin.id_GAS : Coin.id_NEO;
    Util.loading('交易生成中');
    var tran = Coin.makeTran(UTXO.assets, this.targetAddr, coin, count);
    let randomStr = await Random.getSecureRandom(256);
    Util.loading('获取交易编号');
    const txid = await Util.setTran(tran, prikey, pubkey, randomStr);
    wepy.hideLoading();
    if (txid === 'failed') {
      wepy.showModal({
        title: '提示',
        content: '交易失败',
        showCancel: false,
        success: async function(res) {
          if (res.confirm) {
            console.log('用户点击确定');
          }
        }
      });
    } else {
      TransactionTool.unconfirmed.push(txid);
      wepy.showModal({
        title: '交易发送成功',
        content: txid,
        success: async function(res) {
          if (res.confirm) {
            console.log('用户点击确定');
            wx.navigateBack();
          }
        }
      });
    }
  }
}
</script>
