<style lang="less">
.login {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 100rpx;
  width: 90%;
}

.login-item {
  width: 400rpx;
  height: 250rpx;
  margin-top: 30rpx;
  background-color: lightskyblue;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-radius: 5px;
  .icon {
    width: 50rpx;
    height: 50rpx;
  }
  .name {
    color: white;
    margin-top: 30rpx;
    font-weight: 100;
    font-size: 14px;
  }
}

.foot {
  display: inline-block;
  position: fixed;
  bottom: 0;
  margin-bottom: 30rpx;
  font-size: 14px;
  color: slategray;
}
</style>
<template>
  <view class="container">
    <view class="login">
      <view class="login-item" @tap="loginCreate()" >
        <image src="../images/add_account.png" class="icon"></image>
          <text class="name">新建账户</text>
      </view>
       <view class="login-item" @tap="loginScan()">
         <image src="../images/scan_qr.png" class="icon"></image>
          <text class="name">扫描二维码</text>
      </view>
       <view class="login-item" @tap="loginImport()">
         <image src="../images/import_key.png" class="icon"></image>
          <text class="name">导入密钥</text>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import { LOCAL_WALLET } from '../utils/constant';
import { WalletHelper } from '../utils/wallet';
import * as Random from '../utils/random';
export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '登陆'
  };

  components = {};

  data = {};

  computed = {};

  methods = {
    loginCreate() {
      this.onCreateAccount();
      //this.$redirect('./logincreate');
    },
    loginScan() {
      let that = this;
      wepy.scanCode({
        success: res => {
          // console.log(res);
          that.onScanLogin(res.result);
        },
        fail: res => {
          // console.log(res);
        }
      });
    },
    loginImport() {
      console.log(this.disabled);
      if (this.disabled) return;
      else this.$redirect('./loginWIF');
    }
  };

  events = {};

  onLoad() {}
  onShow() {
    const wallet = wepy.getStorageSync(LOCAL_WALLET);
    if (wallets !== {} && wallets !== undefined && wallets !== '') {
      wepy.showLoading({ title: '登陆中' });
      WalletHelper.parse(wallet);
      wepy.reLaunch({ url: './home' });
      wepy.hideLoading();
    }
  }
  async onScanLogin(key) {
     switch (key.length) {
        case 52: //wif
          const prikey = NEL.helper.Helper.GetPrivateKeyFromWIF(key);
          if (prikey.length!==64) {
            wepy.hideLoading();
            tip.alert('密钥格式错误');
            return;
          }
          key = NEL.helper.StringHelper.toHexString(prikey);
        case 64: //privatekey
          WalletHelper.setPrikey(key);
          wepy.hideLoading();
          await wepy.setStorageSync(CURR_WALLET, WalletHelper.toString());
          wepy.reLaunch({ url: './home' });
          break;
        default:
          //error input format
           wepy.hideLoading();
           tip.alert('密钥格式错误')
          break;
      }
  }
  async onCreateAccount(){
      wepy.showLoading({ title: '私钥生成中' });
      let privateKey = await Random.getSecureRandom(64);
      if(privatekey.length !== 64){
        tip.error('私钥生成失败');
        return;
      }
      
      WalletHelper.setPrikey(privateKey);
      await wepy.setStorageSync(CURR_WALLET, WalletHelper.toString());
      wepy.hideLoading();
      wepy.reLaunch({ url: './createresult' });
  }
}
</script>


