<style lang="less">
.area-nav {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20rpx;
  .item {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    height: 140rpx;
    background-color: white;
    .left {
      display: flex;
      flex-direction: row;
      align-items: center;
      margin-left: 30rpx;
      .icon {
        width: 60rpx;
        height: 60rpx;
      }
      .label {
        font-family: PingFangSC-Medium;
        font-size: 14px;
        color: #333333;
        letter-spacing: 0;
        line-height: 14px;
        margin-left: 31rpx;
      }
    }
    .arrow {
      width: 48rpx;
      height: 48rpx;
      margin-right: 30rpx;
    }
  }
}
</style>

<template>
  <view class="container">
    <scroll-view scroll-y class="scroll">
      <view class="inner">
        <userinfo></userinfo>
        <view class="area-nav">
          <navigator class="item" url="/pages/contact" style="border-bottom: thin solid #F5F5F5;">
            <view class="left" >
              <image class="icon" src="../images/M_contact.png"/>
              <view class="label">通讯录</view>
            </view>
            <image class="arrow" src="../images/Arrow.png"/>
          </navigator>

           <navigator class="item" url="/pages/history">
            <view class="left">
              <image class="icon" src="../images/M_history.png"/>
              <view class="label">交易历史</view>
            </view>
            <image class="arrow" src="../images/Arrow.png"/>
          </navigator>

           <navigator class="item" url="/pages/reorder" style="margin-top:20rpx;margin-bottom:20rpx;">
            <view class="left">
              <image class="icon" src="../images/M_NNS.png"/>
              <view class="label">我的NNS</view>
            </view>
            <image class="arrow" src="../images/Arrow.png"/>
          </navigator>

           <navigator class="item" url="/pages/account" style="border-bottom: thin solid #F5F5F5;">
            <view class="left">
              <image class="icon" src="../images/M_account.png"/>
              <view class="label">账户管理</view>
            </view>
            <image class="arrow" src="../images/Arrow.png"/>
          </navigator>

           <navigator class="item" url="/pages/accounts" style="border-bottom: thin solid #F5F5F5;">
            <view class="left">
              <image class="icon" src="../images/M_change.png"/>
              <view class="label">切换账户</view>
            </view>
            <image class="arrow" src="../images/Arrow.png"/>
          </navigator>

          <navigator class="item" url="/pages/watchonly">
            <view class="left">
              <image class="icon" src="../images/M_watchonly.png"/>
              <view class="label">观察模式</view>
            </view>
            <image class="arrow" src="../images/Arrow.png"/>
          </navigator>
        </view>
      </view>
    </scroll-view>
  </view>
</template>
<script>
import wepy from 'wepy';
import Util from '../utils/index';
import CUserInfo from '../components/cuserinfo';
export default class Mine extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} // 自定义方法

  async onLoad() {
  } // 在Page和Component共用的生命周期函数

  async onShow() {
    this.account = Util.get.account();

    this.$apply();
    this.$invoke('userinfo', 'showNNS', 1);
    const user =await Util.get.userInfo();
    this.$invoke('userinfo','showUser',user);
  } // 只在Page中存在的页面生命周期函数
  onReady() {
    this.$apply();
  }
  config = {
    navigationBarTitleText: '个人'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    account: {},
    user: {}
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {
    userinfo: CUserInfo
  }; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    copyToClip(str) {
      let that = this;
      wepy.setClipboardData({
        data: str,
        success: function(res) {
          wepy.getClipboardData({
            success: function(res) {
              console.log(res.data); // data
              Util.show.success('复制成功');
            }
          });
        }
      });
    },
    manage() {
      let that = this;
      wx.showActionSheet({
        itemList: ['重命名', '切换账户', '观察模式', '删除账户'],
        itemColor: '#69c0fd',
        success(res) {
          if (res.tapIndex === 0) {
            wx.showToast({ title: '开发中' });
          } else if (res.tapIndex === 1) {
            wx.navigateTo({ url: './index?switch=' + 1 });
          } else if (res.tapIndex === 2) {
            wx.navigateTo({ url: './watchonly' });
          } else if (res.tapIndex === 3) {
            wx.showModal({
              title: '提示',
              content: '账户删除后只能通过重新导入来恢复',
              showCancel: true,
              success: res => {
                //确认删除
                if (res.confirm) {
                  Wallet.removeWallet();
                  wx.navigateBack();
                } else if (res.cancel) {
                }
              },
              fail: res => {
                reject(payload);
              }
            });
          }
        }
      });
    },
    logout() {
      wepy.reLaunch({ url: './login' });
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数
}
</script>
