<style lang="less">
  .marg {
    margin-top: 1rpx;
  }
  .area-uppper {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .upper-navigator {
    margin-top: 1rpx;
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 100%;
    height: 160rpx;
    justify-content: space-around;
    background-color: white;
  }
  .upper-items {
    width: 375rpx;
    display: flex;
    flex-direction: column;
    align-items: center;
    .up-icon {
      width: 60rpx;
      height: 60rpx;
    }
    .up-label {
      font-family: PingFangSC-Medium;
      font-size: 10px;
      color: #A9A9A9;
      letter-spacing: 0;
      text-align: center;
      line-height: 10px;
      margin-top: 20rpx;
    }
  }
  .selected {
    .label {
      color: #333333;
    }
  }
  .area-lower {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
  }
  .manage-btn {
    margin-top: 50rpx;
    width: 660rpx;
    font-size: 16px;
    box-shadow: 2px 2px 20px rgba(130, 130, 130, 0.2);
    button::after {
      border: none;
    }
  }
</style>
<template>
  <view class="container">
    <scroll-view scroll-y class="scroll">
      <view class="inner">
        <view class="area-uppper">
          <view class="function-title">
            <text class="text">功能</text>
          </view>
          <view class="upper-navigator">
            <view class="upper-items {{selected==0?'selected':''}}" @tap="navigate('account')">
              <image src="../images/W_asset{{selected==0?'_s':''}}.png" class="up-icon" />
              <text class="up-label">账户概览</text>
            </view>
            <view class="upper-items {{selected==1?'selected':''}}" @tap="navigate('history')">
              <image src="../images/W_history{{selected==1?'_s':''}}.png" class="up-icon" />
              <text class="up-label">交易历史</text>
            </view>
            <view class="upper-items {{selected==2?'selected':''}}" @tap="navigate('manager')">
              <image src="../images/W_account{{selected==2?'_s':''}}.png" class="up-icon" />
              <text class="up-label">账户管理</text>
            </view>
          </view>
        </view>
        <view class="area-lower">
          <view wx:if="{{selected==0}}">
            <cassets></cassets>
          </view>
          <view wx:elif="{{selected==1}}">
            <chistory class="marg"></chistory>
          </view>
          <view wx:else>
            <view class="manage-btn">
              <button type="primary" style="background-color:#69c0fd;width: 660rpx;" @tap="manage('normal')">正常登陆模式</button>
            </view>
            <view class="manage-btn">
              <button type="primary" style="background-color:#69c0fd;width: 660rpx;" @tap="manage('switch')">切换观察账户</button>
            </view>
            <view class="manage-btn">
              <button type="primary" style="background-color:#f67581;width: 660rpx;" @tap="manage('delete')">删除当前账户</button>
            </view>
          </view>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Util, {
    Https
  } from '../utils/index';
  import {
    TaskType
  } from '../utils/entity';
  import CAssets from '../components/cassets';
  import CHistory from '../components/chistory';
  export default class Watch extends wepy.page {
    config = {
      navigationBarTitleText: '观察账户'
    };
    components = {
      cassets: CAssets,
      chistory: CHistory
    };
    data = {
      selected: 0,
      assets: {},
      address: '',
      TXs: [],
      isLoading: false,
      page: 1,
      label: '',
      notEmpty: 'true'
    };
    computed = {};
    methods = {
      async OnDetail(txid) {
        wepy.navigateTo({
          url: './transaction?txid=' + txid
        });
      },
      async manage(param) {
        let that = this;
        switch (param) {
          case 'normal':
            wepy.reLaunch({
              url: '/pages/index?switch=' + 0
            });
            break;
          case 'switch':
            wepy.navigateTo({
              url: '/pages/watchonly'
            });
            break;
          case 'delete':
            Util.show.loading('账户删除中');
            let res = await Https.addr_delete(Wallet.openid, that.address);
            Util.hide.loading();
            if (res['code'] == 0) {
              Util.show.success('删除成功');
              wepy.reLaunch({
                url: '/pages/index?switch=' + 0
              });
            } else Util.show.error('删除失败');
            break;
          default:
            break;
        }
        that.$apply();
      },
      navigate(param) {
        let that = this;
        switch (param) {
          case 'account':
            that.selected = 0;
            Util.delegate.tx = null;
            break;
          case 'history':
            that.selected = 1;
            that.OnLoadTXs()
            break;
          case 'manager':
            that.selected = 2;
            break;
          default:
            break;
        }
        that.$apply();
      }
    };
    events = {};
    onLoad(option) {
      console.log('==========')
      console.log(JSON.parse(option.account))
      const account = JSON.parse(option.account);
      this.address = account.address;
      this.label = account.tag;
      this.$apply();
    }
    async onShow() {
      this.onSetDelegate();
    }
    /**
     * 下拉刷新
     */
    async onPullDownRefresh() {
      if (this.isLoading) return;
      this.isLoading = true;
      this.$apply();
      this.TXs = await Util.get.TXs(1);
      this.isLoading = false;
      this.$apply();
      wx.hideNavigationBarLoading(); //完成停止加载
      wx.stopPullDownRefresh(); //停止下拉刷新
    }
    onSetDelegate() {
      if (this.isLoading)
        return;
      this.isLoading = true;
      this.$apply();
      let that = this;
      // 设置资产更新回调
      Util.Emitter.fire(TaskType.asset, assets => {
        assets['GAS'].amount = parseFloat(assets['GAS'].amount).toFixed(4);
        assets['NEO'].amount = parseFloat(assets['NEO'].amount).toFixed(0);
        that.isLoading = false;
        that.$invoke('cassets', 'LoadCoins', assets);
        that.$apply();
      }, this.address);
    }
    async OnLoadTXs() {
      if (this.isLoading) return;
      this.isLoading = true;
      this.$apply();
      let that = this;
      Util.show.loading('历史数据加载中');
      Util.Emitter.fire(TaskType.history, txs => {
        if (txs === null) {
          that.notEmpty = 'false';
        } else {
          that.notEmpty = 'true';
        }
        that.$invoke('chistory', 'LoadTXs', txs);
        that.isLoading = false;
        Util.hide.loading();
        that.$apply();
      }, this.address)
    }
    /**
     * 分享
     */
    onShareAppMessage() {
      let that = this;
      return {
        title: that.address,
        desc: '观察账户:' + that.label,
        path: '/pages/watch?address=' + that.address
      };
    }
  }
</script>
 