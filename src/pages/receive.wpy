<style lang="less">
.area-qrcode {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 80%; // 750rpx
  margin-top: 80rpx;
  background-color: white;
}
.qrcode-item {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-content: center;
  align-items: center;
}
.qrcode {
  margin-top: 30px;
}
.note-text {
  margin-top: 20px;
  font-size: 13px;
}
.area-address {
  display: flex;
  flex-direction: column;
  align-items: left;
  width: 100%;
  margin: 20px 15px 20px 15px;
  background-color: white;
}
.address-label {
  margin-top: 5px;
  font-size: 12px;
  font-family: normal;
  font-weight: 900;
  padding-left: 10px;
}
.address-content {
  margin-top: 9px;
  font-size: 12px;
  font-family: italic;
  font-weight: 400;
  word-break: break-all;
  color: #1E90FF;
  padding: 0 10px 5px 10px;
}
</style>

<template>
  <view class="container">
    <view class="area-qrcode">
        <text class="note-text" >点击二维码，复制地址</text>
        <view class="qrcode" @tap="copyToClip({{wallet.address}})">
            <canvas style="width: 200px; height: 200px;" canvas-id="address"></canvas>
        </view>
        <view class="area-address">
            <text class="address-label">地址:</text>
            <text class="address-content">{{wallet.address}}</text>
        </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import drawQrcode from 'weapp-qrcode';
import tip from '../utils/tip';
import { CURR_WALLET } from '../utils/constant';
import { WalletHelper } from '../utils/wallet';
export default class Receive extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} // 自定义方法

  onLoad(option) {
    // this.wallet = JSON.parse(option.wallet)['accounts'][0];
    // this.wallet = wepy.getStorageSync(CURR_WALLET) || {};
    this.wallet =  WalletHelper.wallet// this.wallet['accounts'][0];
    this.$apply();
    console.log(this.wallet);
    drawQrcode({
      width: 200,
      height: 200,
      canvasId: 'address',
      text: this.wallet.address
    });
  } // 在Page和Component共用的生命周期函数

  onShow() {} // 只在Page中存在的页面生命周期函数

  config = {
    navigationBarTitleText: 'Receive'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    wallet: {}
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {}; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    copyToClip(str) {
      let that = this;
      wepy.setClipboardData({
        data: str,
        success: function(res) {
          wepy.getClipboardData({
            success: function(res) {
              console.log(res.data); // data
              tip.alert('地址复制成功');
            }
          });
        }
      });
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数
}
</script>
