<style lang="less">
.bg {
  background: linear-gradient(to right, #69c0fd, #a6a4fd);
}
.area-qrcode {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 700rpx;
  margin-top: 71rpx;
  background-color: white;
  border-radius: 5px;
  box-shadow: 10px 15px 20px rgba(100, 100, 100, 0.2);
}
.qrcode-item {
  display: flex;
  flex-direction: column;
  align-content: center;
  align-items: center;
}
.area-text {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  margin-top: 15px;
}
.area-text-item {
  display: flex;
  flex-direction: column;
  align-items: left;
  width: 100%;
  margin: 2px 15px 0 15px;
  background-color: white;
}
.text-label {
  margin-top: 5px;
  font-size: 12px;
  font-family: normal;
  font-weight: 900;
  padding-left: 5px;
}
.text-content {
  margin-top: 9rpx;
  font-size: 12px;
  font-family: italic;
  font-weight: 400;
  word-break: break-all;
  color: #777;
  padding: 0 10px 5px 10px;
}
.area-btn {
  display: block;
  margin-top: 100rpx;
  width: 80%;
}
.warnning {
  position: fixed;
  bottom: 0;
  margin-bottom: 10px;
  color: red;
}
</style>

<template>
  <view class="container bg">
    <view class="area-qrcode">
      <view class="qrcode-item">
        <canvas style="width: {{canvasWH}}px; height: {{canvasWH+70}}px;" canvas-id="nep2Key"></canvas>
      </view>
    </view>
    <view class="area-text">
      <view class="area-text-item"  @tap="copyToClip(name = {{wallet.name}})">
        <text class="text-label">Name:</text>
        <text class="text-content" >{{wallet.name}}</text>
      </view>
      <view class="area-text-item"  @tap="copyToClip(address = {{wallet.address}})">
        <text class="text-label">Address:</text>
        <text class="text-content">{{wallet.address}}</text>
      </view>
      <view class="area-text-item"  @tap="copyToClip(nep2Key = {{wallet.key}})">
        <text class="text-label">NEO小程序账户备份:</text>
        <text class="text-content" >{{wallet.key}}</text>
      </view>
    </view>
    <view class="area-btn">
      <button type="primary" @tap="login()">登陆</button>
    </view>
    <text class="warnning">非常重要，请截图保存！！</text>
  </view>
</template>

<script>
import wepy from 'wepy';
import drawQrcode from '../lib/qrcode/index';
import tip from '../utils/tip';
import * as TimeHelper from '../utils/time';
export default class CreateResult extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} // 自定义方法

  onLoad(option) {
    let that = this;

    wx.getSystemInfo({
      //获取系统信息成功，将系统窗口的宽高赋给页面的宽高
      success: function(res) {
        that.width = res.windowWidth;
        that.height = res.windowHeight;
        that.canvasWH = res.windowWidth * 0.93;

        const t = TimeHelper.formatTime(new Date(), 'Y/M/D h:m:s');
        that.currTime = t;
        that.$apply();

        that.OnDraw();
      }
    });
    wx.onUserCaptureScreen(function(res) {
      console.log('用户截屏了');
      that.captureScreen = true;
      that.$apply();
    });

    this.$apply();
  } // 在Page和Component共用的生命周期函数

  onShow() {} // 只在Page中存在的页面生命周期函数

  config = {
    navigationBarTitleText: 'Result'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    wallet: {},
    captureScreen: false,
    currTime: '',
    height: 0,
    width: 0,
    canvasWH: 0,
    pixelRatio: 0
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {}; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    copyToClip(str) {
      let that = this;
      wepy.setClipboardData({
        data: str,
        success: function(res) {
          wepy.getClipboardData({
            success: function(res) {
              console.log(res.data); // data
              tip.alert('复制成功');
            }
          });
        }
      });
    },

    login() {
      if (!this.captureScreen) {
        tip.alert('请截图保存账户信息');
        return;
      }
      this.$redirect('./index');
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数

  OnDraw() {
    let that = this;
    drawQrcode({
      WH: that.width,
      CWH: that.canvasWH,
      name: 'nuanbing:', //wallet.name+'：'+wallet.address
      addr: 'ASCjW4xpfr8kyVHY1J2PgvcgFbPYa1qX7F',
      currTime: that.currTime,
      canvasId: 'nep2Key',
      text: 'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh' //this.wallet.key
    });
  }
}
</script>
