import { Stream } from './Stream';
import { ISerializable } from './ISerializable';
import { Fixed8 } from '../Fixed8';
import { Uint64 } from '../Uint64';
import { Uint160 } from '../Uint160';
import { Uint256 } from '../Uint256';
export declare class BinaryReader {
    private input;
    private _buffer;
    private array_uint8;
    private array_int8;
    private array_uint16;
    private array_int16;
    private array_uint32;
    private array_int32;
    private array_float32;
    private array_float64;
    constructor(input: Stream);
    close(): void;
    private fillBuffer(buffer, count);
    read(buffer: ArrayBuffer, index: number, count: number): number;
    readBoolean(): boolean;
    readByte(): number;
    readBytes(count: number): ArrayBuffer;
    readDouble(): number;
    readFixed8(): Fixed8;
    readInt16(): number;
    readInt32(): number;
    readSByte(): number;
    readSerializable(T: Function): ISerializable;
    readSerializableArray(T: Function): ISerializable[];
    readSingle(): number;
    readUint16(): number;
    readUint160(): Uint160;
    readUint256(): Uint256;
    readUint32(): number;
    readUint64(): Uint64;
    readVarBytes(max?: number): ArrayBuffer;
    readVarInt(max?: number): number;
    readVarString(): string;
}
