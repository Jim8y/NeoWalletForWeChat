 <style lang="less">
.area-upper {
  height: 450rpx;
  width: 100%;
  background: linear-gradient(to right, #69c0fd, #a6a4fd);
  display: flex;
  flex-direction: column;
  align-items: center;
}

.upper-higher {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  width: 700rpx;
  .total {
  }
  .net-state {
  }
}
.upper-btn {
  width: 750rpx;
  display: flex;
  flex-direction: row;
  margin-top: 50rpx;
  .btn {
    width: 375rpx;
    button {
      width: 200rpx;
    }
  }
}
.area-lower {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
}

.lower-asset {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 36rpx;
}
.asset-block {
  width: 660rpx;
  display: block;
}

.asset-icon {
  width: 60rpx;
  height: 60rpx;
}
.asset-content {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 660rpx;
  height: 95rpx;
  margin-top: 28rpx;
  border-radius: 5px;
  background-color: white;
  box-shadow: 2px 2px 20px rgba(130, 130, 130, 0.2);
  .left {
    display: flex;
    flex-direction: row;
    align-items: center;
    .icon {
      width: 60rpx;
      height: 60rpx;
    }
    .asset {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
    }
  }
  .right {
    .price {
      width: 200rpx;
      height: 100%;
      display: flex;
      flex-direction: row;
      justify-content: flex-start;
      align-items: center;
      text {
        color: #27adf1;
        font-size: 13px;
        font-family: Helvetica, Arial, sans-serif;
      }
    }
  }
  .label {
    font-size: 13px;
    color: #a3a3a3;
    margin-left: 50rpx;
    font-family: Helvetica, Arial, sans-serif;
  }
}
</style>
<template>
  <view class="container">
    <scroll-view scroll-y class="scroll">
      <view class="inner">
        <view class="area-upper">
          <view class="upper-higher">
            <view class="total">
            {{total}}
            </view>
            <view class="net-state">
            测试网
            </view>
          </view>
          <view class="upper-btn">
            <view class="btn"  @tap="navigate('receive')">
              <button>收款</button>
            </view>
            <view class="btn"  @tap="navigate('send')">
              <button>转账</button>
            </view>
          </view>
        </view>
  
        <view class="area-lower">
          <view class="lower-asset">
            <view class="asset-block" wx:for="{{assets}}" >
              <view class="asset-content">
                <view class="left">
                  <image src="../images/neo.png" class="icon"></image>
                  <view class="asset">
                    <text class="label" >{{item.total }} ￥</text>
                    <text class="label">{{item.amount+ ' ' + item.name}}</text>
                  </view>
                </view>
                <view class="price">
                  <text  style="color:{{item.rise?'#45d68a':'#f67581'}};">￥{{item.price}}</text>
                </view>
              </view>
            </view>
          </view>
        </view>
    </view>
  </scroll-view>
  </view>

</template>

<script>
import wepy from 'wepy';
import Util, { Https } from '../utils/index';
import Wallet from '../utils/wallet';
import { Claim } from '../utils/entity';
import Identicon from 'identicon.js';
export default class Home extends wepy.page {
  config = {
    navigationBarTitleText: '首页'
  };

  components = {};

  data = {
    assets: {},
    isLogin: false,
    avater: '',
    total: '0.00'
  };

  computed = {};

  methods = {
    async navigate(page) {
      Util.set.resolve();
      return;
      if (Util.get.account() === null) {
        if (page === 'mine') {
          wepy.navigateTo({
            url: '/pages/index?switch=' + 0
          });
        } else Util.show.error('您尚未登陆钱包账户');
        return;
      } else {
        wepy.navigateTo({
          url: '/pages/' + page
        });
      }
    }
  };

  events = {};

  onLoad() {}
  async onShow() {
    var data = new Identicon(
      '0387419467127d60bef1e11126cb1311609319e7a50c04781950498355cb8e1ad6',
      { size: 20, margin: 0 }
    ).toString();
    console.log(data.length);
    this.avater = 'data:image/png;base64,' + data;
    this.$apply();
  }
  // 页面渲染完成
  async onReady() {
    const that = this;
    await this.OnLogin();

    // 设置资产更新回调
    Util.delegate.asset(assets => {
      assets['GAS'].amount = parseFloat(assets['GAS'].amount).toFixed(4);
      assets['NEO'].amount = parseFloat(assets['NEO'].amount).toFixed(0);
      that.assets = assets;
      that.total = Util.get.total().toFixed(2);
      that.Block = Util.get.height();
      that.$apply();
    });
  }

  async OnLogin() {
    let that = this;
    const account = Util.get.cache(Util.const.CURR_ACCOUNT) || {};
    // 本地缓存有账户 则直接加载本地账户信息
    try {
      if (account.address !== undefined && account.address !== null) {
        this.isLogin = true;
        this.$apply();
        Util.set.account(account);
        Util.service.start(account);
      }
    } catch (err) {}
  }
  onShareAppMessage() {
    return {
      title: 'NEO钱包',
      path: '/pages/index'
    };
  }
  async claim() {
    let res = await Https.api_getclaimgas(Util.get.account().address);

    console.log(res);
    let claims = [];
    for (let i in res['claims']) {
      let claim = new Claim(res.claims[i]);
      claims.push(claim);
    }

    let a = res['gas'].toFixed(8);
    Util.send.claim(claims, a);
  }
}
</script>
 