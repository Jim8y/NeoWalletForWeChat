<style lang="less">
  .area-upper {
    height: 320rpx;
    width: 690rpx;
    background: linear-gradient(165deg, #51d2ee 3%, #21a3ff 100%);
    box-shadow: 0 2px 5px 0 #77ccf8;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 32rpx;
    .upper-user {
      display: flex;
      flex-direction: row;
      align-items: center;
      width: 100%;
      margin-top: 36rpx;
      justify-content: space-between;
      .user {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-left: 40rpx;
        .avater {
          width: 60rpx;
          height: 60rpx;
          border-radius: 50%;
        }
        .name {
          margin-left: 16rpx;
          font-family: PingFangSC-Medium;
          font-size: 14px;
          color: #ffffff;
          letter-spacing: 0;
          line-height: 14px;
        }
      }
      .qrcode {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-right: 40rpx;
        .image {
          width: 48rpx;
          height: 48rpx;
        }
        .label {
          font-family: PingFangSC-Regular;
          font-size: 10px;
          color: #ffffff;
          letter-spacing: 0;
          margin-top: 6rpx;
        }
      }
    }
    .upper-asset {
      display: flex;
      flex-direction: row;
      align-items: center;
      width: 100%;
      margin-top: 60rpx;
      margin-left: 50rpx;
      .label {
        font-family: PingFangSC-Regular;
        font-size: 10px;
        color: #ffffff;
        letter-spacing: 0;
        text-align: center;
        line-height: 10px;
      }
      .amount {
        font-family: PingFangSC-Medium;
        font-size: 24px;
        color: #ffffff;
        letter-spacing: 0;
        text-align: center;
        line-height: 24px;
        margin-left: 80rpx;
        justify-content: center;
      }
      .icon {
        width: 48rpx;
        height: 48rpx;
        margin-left: 20rpx;
      }
    }
  }
  .area-block-height {
    display: flex;
    align-items: center;
    flex-direction: row;
    width: 100%;
    height: 104rpx;
    border-bottom: solid thin #f5f5f5;
    background-color: white;
    .label {
      font-family: PingFangSC-Regular;
      font-size: 12px;
      color: #9a9a9a;
      margin-left: 40rpx;
      letter-spacing: 0;
      line-height: 12px;
    }
  }
  .area-claim {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    height: 146rpx;
    background-color: white;
    margin-top: 1rpx;
    .left {
      margin-left: 30rpx;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      height: 100%;
      .label {
        font-family: PingFangSC-Medium;
        font-size: 12px;
        color: #333333;
        letter-spacing: 0;
        line-height: 12px;
        margin-top: 40rpx;
      }
      .amount {
        font-family: PingFangSC-Medium;
        font-size: 16px;
        color: #333333;
        letter-spacing: 0;
        line-height: 16px;
        margin-top: 15rpx;
      }
    }
    .btn-claim {
      background: #22a4ff;
      border-radius: 3px;
      margin-right: 30rpx;
      height: 48rpx;
      display: flex;
      flex-direction: row;
      align-items: center;
      text {
        width: 120rpx;
        font-family: PingFangSC-Medium;
        font-size: 14px;
        color: #ffffff;
        letter-spacing: 0;
        text-align: center;
        line-height: 14px;
      }
    }
    .invalid {
      background: #b2b2b2;
    }
  }
</style>
<template>
  <view class="container">
    <scroll-view scroll-y class="scroll">
      <view class="inner">
        <view class="area-upper">
          <view class="upper-user">
            <view class="user">
              <image src="{{user.avatarUrl}}" class="avater" />
              <text class="name">{{user.nickName}}</text>
            </view>
            <view class="qrcode" @tap="receive">
              <image src="../images/QRcode.png" class="image" />
              <text class="label">收款</text>
            </view>
          </view>
          <view class="upper-asset">
            <text class="label">总资产</text>
            <text class="amount">￥ {{totalShow}}</text>
            <image src="../images/{{showAsset==0?'Hide':'Show'}}.png" class="icon" @tap="onShowAsset()" />
          </view>
        </view>
        <view class="area-block-height">
          <text class="label">区块高度:{{Block}}</text>
        </view>
        <view class="area-claim">
          <view class="left">
            <text class="label">未提取GAS</text>
            <text class="amount">{{claim.total}}</text>
          </view>
          <view class="btn-claim {{claim.total === '0.00000000'?'invalid':''}} " @tap="claim()"><text>提取</text></view>
        </view>
        <cassets></cassets>
      </view>
    </scroll-view>
    <cnotice/>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import Util from '../utils/index';
  import Wallet from '../utils/wallet';
  import {
    Claims,
    TaskType
  } from '../utils/entity';
  import Emitter from '../utils/Emitter';
  import CAssets from '../components/cassets';
  import NotifyMixin from '../mixins/mnotify';
  import CNotice from '../components/cnotice'
  export default class Home extends wepy.page {
    config = {
      navigationBarTitleText: '钱包'
    };
    components = {
      cassets: CAssets,
      cnotice: CNotice
    };
    mixins = [NotifyMixin];
    data = {
      assets: {},
      user: {},
      total: '0.00',
      totalShow: '*.**',
      Block: '0',
      claim: {
        total: '0.00000000'
      },
      showAsset: false,
      isLoading: false,
    };
    computed = {};
    methods = {
      receive() {
        wx.navigateTo({
          url: './receive'
        });
      },
      async claim() {
        if (parseFloat(this.claim.total) < 0.1) {
          return;
        }
        await Util.send.claim(this.claim.claims, '0.01'); //this.claim.total);
      },
      onShowAsset() {
        this.showAsset = !this.showAsset;
        this.$apply();
        this.onShowAsset();
      }
    };
    events = {};
    async onLoad() {
      this.user = await Util.get.userInfo();
      this.$apply();
    }
    async onShow() {
      let that = this;

      this.notify('数据更新中...');
      
      //update the height regularly
      Emitter.register(TaskType.height, (height) => {
        that.Block = height;
        console.log('height update')
        console.log(height)
        that.$apply();
      }, this);
      // Emitter.register(TaskType.asset,())
    }
    // 页面渲染完成
    async onReady() {
      await this.OnLogin();

      
    }
    async OnLogin() {
      let that = this;
      const account = Util.get.cache(Util.const.CURR_ACCOUNT) || {};
      // 本地缓存有账户 则直接加载本地账户信息
      try {
        if (account.address !== undefined && account.address !== null) {
          Util.service.start(account);
          this.isLogin = true;
          this.$apply();
          Util.set.account(account);
          that.onSetDelegate();
        }
      } catch (err) {
        // console.log(err);
        Util.show.error('未知错误，请重新进入');
      }
    }
    onShowAsset() {
      if (this.showAsset === false) {
        this.totalShow = this.total.replace(/[0-9]/g, '*');
      } else this.totalShow = this.total;
      this.$apply();
    }
    onSetDelegate() {
      if (this.isLoading)
        return;
      this.isLoading = true;
      this.$apply();
      let that = this;
      // 设置资产更新回调
      // Emitter.fire(TaskType.claim);
      // Emitter.register(TaskType.asset,ass)
      Emitter.register(TaskType.asset, assets => {
        assets['GAS'].amount = parseFloat(assets['GAS'].amount).toFixed(4);
        assets['NEO'].amount = parseFloat(assets['NEO'].amount).toFixed(0);
        that.$invoke('cassets', 'LoadCoins', assets);
        that.total = Util.get.total().toFixed(2);
        that.claim = Util.get.claim();
        that.isLoading = false;
        that.$apply();
        // console.log(that.claim);
        that.onShowAsset();
      });
    }
    async onPullDownRefresh() {
      if (this.isLoading) return;
      this.$apply();
      this.onSetDelegate();
      wx.hideNavigationBarLoading(); // 完成停止加载
      wx.stopPullDownRefresh(); // 停止下拉刷新
    }
  }
</script>
 