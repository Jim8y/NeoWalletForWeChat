<style lang="less">
/**index.wxss**/

.msg-list {
  display: block;
  flex-direction: column;
  align-items: center;
}

.msg-item {
  width: 100%;
  height: 150rpx;
  border-bottom: 1rpx solid rgb(233, 233, 233);
  position: relative;
  left: 0;
  top: 0;
  overflow: hidden;
}

.msg {
  position: absolute;
  width: 100%;
  height: 150rpx;
  left: 0;
  top: 0;
  z-index: 100;
  background-color: #fff;
}

.header-img {
  position: absolute;
  width: 110rpx;
  height: 110rpx;
  left: 20rpx;
  top: 20rpx;
  border-radius: 10%;
}

.user-name {
  position: absolute;
  left: 150rpx;
  top: 20rpx;
}

.msg-text {
  position: absolute;
  left: 150rpx;
  bottom: 20rpx;
  font-size: 80%;
  color: rgb(127, 127, 127);
}

.msg-menu {
  position: absolute;
  width: 100%;
  height: 150rpx;
  left: 0;
  top: 0;
  z-index: 0;
}

.menu-delete {
  position: absolute;
  width: 150rpx;
  height: 148rpx;
  top: 1rpx;
  right: 0;
  background-color: rgb(255, 58, 50);
  color: #fff;
  text-align: center;
  line-height: 150rpx;
}

.menu-mark {
  position: absolute;
  width: 200rpx;
  height: 148rpx;
  top: 1rpx;
  right: 150rpx;
  background-color: rgb(200, 199, 205);
  color: #fff;
  text-align: center;
  line-height: 150rpx;
}
</style>

<template>
   <scroll-view scroll-y='{{scrollY}}' class='msg-list' bindscroll = 'onScroll'>
       <view wx:for="{{msgList}}" wx:key="id"  class='msg-item'> 
            <view id='{{item.id}}' class='msg' animation='{{item.animation}}' bindtouchstart='ontouchstart' bindtouchmove='ontouchmove' bindtouchend='ontouchend'>
                <image class='header-img' src="{{item.headerImg}}" />
                <text class='user-name'>{{item.userName}}</text>
                <text class='msg-text'>{{item.msgText}}</text>
            </view>
            <view class='msg-menu'>
                <view id='{{item.id}}' class='menu-delete' bindtap='onDeleteMsgTap' bindlongtap='onDeleteMsgLongtap'>
                    删除
                </view>
                <view id='{{item.id}}' class='menu-mark' bindtap='onMarkMsgTap' bindlongtap='onMarkMsgLongtap'>
                    标记未读
                </view>
            </view>
       </view>
   </scroll-view>
</template>
<script>
import wepy from 'wepy';
// import Util from '../../utils/index';
export default class CContact extends wepy.component {
  props = {};
  components = {};

  data = {
    msgList: [],
    scrollY: true,
    swipeCheckX: 35, //激活检测滑动的阈值
    swipeCheckState: 0, //0未激活 1激活
    maxMoveLeft: 185, //消息列表项最大左滑距离
    correctMoveLeft: 175, //显示菜单时的左滑距离
    thresholdMoveLeft: 75, //左滑阈值，超过则显示菜单
    lastShowMsgId: '', //记录上次显示菜单的消息id
    moveX: 0, //记录平移距离
    showState: 0, //0 未显示菜单 1显示菜单
    touchStartState: 0, // 开始触摸时的状态 0 未显示菜单 1 显示菜单
    swipeDirection: 0, //是否触发水平滑动 0:未触发 1:触发水平滑动 2:触发垂直滑动
    lastMoveTime: 0
  };

  methods = {
    ontouchstart(e) {
      if (this.showState === 1) {
        this.touchStartState = 1;
        this.showState = 0;
        this.moveX = 0;
        this.translateXMsgItem(this.lastShowMsgId, 0, 200);
        this.lastShowMsgId = '';
        return;
      }
      this.firstTouchX = e.touches[0].clientX;
      this.firstTouchY = e.touches[0].clientY;
      if (this.firstTouchX > this.swipeCheckX) {
        this.swipeCheckState = 1;
      }
      this.lastMoveTime = e.timeStamp;
    },

    ontouchmove(e) {
      if (this.swipeCheckState === 0) {
        return;
      }
      //当开始触摸时有菜单显示时，不处理滑动操作
      if (this.touchStartState === 1) {
        return;
      }
      var moveX = e.touches[0].clientX - this.firstTouchX;
      var moveY = e.touches[0].clientY - this.firstTouchY;
      //已触发垂直滑动，由scroll-view处理滑动操作
      if (this.swipeDirection === 2) {
        return;
      }
      //未触发滑动方向
      if (this.swipeDirection === 0) {
        console.log(Math.abs(moveY));
        //触发垂直操作
        if (Math.abs(moveY) > 4) {
          this.swipeDirection = 2;
          return;
        }
        //触发水平操作
        if (Math.abs(moveX) > 4) {
          this.swipeDirection = 1;
          this.setData({ scrollY: false });
        } else {
          return;
        }
      }
      this.lastMoveTime = e.timeStamp;
      //处理边界情况
      if (moveX > 0) {
        moveX = 0;
      }

      //检测最大左滑距离
      if (moveX < -this.maxMoveLeft) {
        moveX = -this.maxMoveLeft;
      }

      this.moveX = moveX;
      this.translateXMsgItem(e.currentTarget.id, moveX, 0);
    },
    ontouchend(e) {
      this.swipeCheckState = 0;
      var swipeDirection = this.swipeDirection;
      this.swipeDirection = 0;
      if (this.touchStartState === 1) {
        this.touchStartState = 0;
        this.setData({ scrollY: true });
        return;
      }
      //垂直滚动，忽略
      if (swipeDirection !== 1) {
        return;
      }
      if (this.moveX === 0) {
        this.showState = 0;
        //不显示菜单状态下,激活垂直滚动
        this.setData({ scrollY: true });
        return;
      }
      if (this.moveX === this.correctMoveLeft) {
        this.showState = 1;
        this.lastShowMsgId = e.currentTarget.id;
        return;
      }
      if (this.moveX < -this.thresholdMoveLeft) {
        this.moveX = -this.correctMoveLeft;
        this.showState = 1;
        this.lastShowMsgId = e.currentTarget.id;
      } else {
        this.moveX = 0;
        this.showState = 0;
        //不显示菜单,激活垂直滚动
        this.setData({ scrollY: true });
      }
      this.translateXMsgItem(e.currentTarget.id, this.moveX, 500);
    }
  };

  onLoad() {
    for (var i = 0; i < 30; i++) {
      var msg = {};
      msg.userName = '' + '用户' + i + 1;
      msg.msgText = '您有新的消息';
      msg.id = i + '';
      msg.headerImg = '../images/neo.png';
      this.msgList.push(msg);
      this.$apply();
    }
  }
  translateXMsgItem(id, x, duration) {
    var animation = wx.createAnimation({ duration: duration });
    animation.translateX(x).step({ duration: 500 });
    this.msgList[id].animation = animation.export();
    this.$apply();
  }
}
</script>
