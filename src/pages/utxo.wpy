<style lang="less">
.history-block {
  width: 90%;
  display: block;
  flex-direction: column;
  border-radius: 5px;
  margin-top: 10rpx;
  background-color: white;
  padding: 5px 10px 5px 10px;
}

.area-txid {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: wrap;
  border-bottom: thin gray dashed;
  .label {
    font-size: 13px;
  }
  .txid {
    display: block;
    color: gray;
    word-break: break-all;
    font-size: 13px;
    margin: 5px 0 5px 5px;
  }
}

.area-count {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  align-items: center;
  margin-top: 5px;
  width: 100%;
  .label {
    font-size: 13px;
    color: rgb(13, 107, 13);
  }
  .count {
    font-size: 15px;
    padding-right: 5px;
  }
}
</style>
<template>
  <view class="container">
   <view class="history-block" wx:for="{{utxos}}" >
      <view class ="area-txid" @tap="OnDetail({{item.txid}})">
        <text class="label">交易编号</text>
        <text class="txid">{{item.txid}}</text>
      </view>
      <view class="area-count">
        <text class="label"> {{item.asset}}：</text>
        <text class="count">{{item.count}}</text>
      </view>
    </view>
  </view>

</template>

<script>
import wepy from 'wepy';
import { USER_INFO, LOCAL_WALLET } from '../utils/constant';
import { UTXO } from '../utils/UTXO';
import { WWW } from '../utils/API';
import { WalletHelper } from '../utils/wallet';
export default class History extends wepy.page {
  config = {
    navigationBarTitleText: 'History',
    enablePullDownRefresh: true
  };

  components = {};

  data = {
    utxos: [],
    TXs: [],
    page: 1,
    address: '',
    isLoading: false
  };

  computed = {};

  methods = {
    async OnDetail(txid) {
      const r = await WWW.rpc_getRawTransaction(txid);
      console.log(r);
    }
  };

  events = {};

  onLoad() {
    this.utxos = UTXO.history;
    this.address = WalletHelper.wallet.address;
    this.$apply();
  }
  onShow() {
    this.OnLoadTXs();
  }
  onPullDownRefresh() {
    console.log('onPullDownRefresh');
    this.page = 1;
    this.$apply();
    this.OnLoadTXs();
  }

  /**
   * Pull up refresh
   */
  async onReachBottom() {
    console.log('onReachBottom');
    this.OnLoadTXs();
    this.page = parseInt(this.page) + 1;
    this.$apply();
  }

  async OnLoadTXs() {
    this.isLoading = true;
    this.$apply();
    const txs = await WWW.rpc_getAddressTXs(this.address, 20, this.page);
    console.log(txs);
    this.isLoading = false;
  }
}
</script>
