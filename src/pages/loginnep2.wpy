<style lang="less">
.logo {
  position: relative;
  width: 200rpx;
  height: 200rpx;
  margin-top: 90px;
  border-radius: 7%;
}
.area-passphrase {
  width: 100%;
  background-color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.passphrase-item {
  display: flex;
  align-items: center;
  flex-direction: row;
  border-top: 1px solid #efefef;
  padding: 20rpx 20rpx;
  width: 96%;
  justify-content: center;
  .title {
    flex: 2;
    margin-right: 20rpx;
    font-size: 14px;
  }
  .input {
    flex: 9;
    input {
      font-size: 13px;
      color: #333;
    }
  }
}
.area-btn {
  margin-top: 100rpx;
  width: 80%;
}
.form {
  width: 100%;
  align-items: center;
}
</style>

<template>
<form bindsubmit="formSubmit" class="form">
  <view class="container">
    <image src="../images/icon.png" class="logo"></image>
    
      <view class="area-passphrase">
        <view class="passphrase-item">
          <text class="title">钱包名:</text>
          <view class="input">
            <input type="text" name="accountlabel" placeholder="设置钱包名" value=''/>
          </view>
        </view>
        <view class="passphrase-item">
          <view class="title">密码:</view>
            <view class="input">
            <input type="text" name="passphrase" password placeholder="输入密码" value=''/>
          </view>
        </view>
      </view>
      <view class="area-btn">
        <button type="primary" formType="submit">登陆</button>
      </view>
   
  </view>
   </form>
</template>

<script>
import wepy from 'wepy';
import * as NEL from '../lib/neo-ts/index';
import { LOCAL_WALLET, CURR_WALLET } from '../utils/constant';
import tip from '../utils/tip';
import { WalletHelper } from '../utils/wallet';
import * as Random from '../utils/random';
export default class LoginNep2 extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} // 自定义方法

  onLoad(option) {
    this.nep2key = option.nep2;
    this.$apply();
  } // 在Page和Component共用的生命周期函数

  onShow() {} // 只在Page中存在的页面生命周期函数

  config = {
    navigationBarTitleText: 'Nep2'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    nep2key: ''
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {}; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    async formSubmit(e) {
      let that = this;
      let accountlabel = e.detail.value.accountlabel;
      let passphrase = e.detail.value.passphrase;

      if (passphrase === '') {
        tip.alert('密码不能为空');
        return;
      }
      if (accountlabel === '') {
        tip.alert('钱包名不能为空');
        return;
      }
      console.log('form发生了submit事件，携带数据为：', e.detail.value);
      console.log(LOCAL_WALLET);

      let wallets = wepy.getStorageSync(LOCAL_WALLET) || {};
      console.log(wallets);
      console.log(wallets[accountlabel]);
      if (wallets[accountlabel] !== undefined) {
        tip.alert('账户名已存在');
        return;
      }
      wepy.showLoading({ title: '密码验证中' });
      var wallet = new NEL.nep6.nep6wallet();
      wallet.scrypt = new NEL.nep6.nep6ScryptParameters();
      wallet.scrypt.N = 16384;
      wallet.scrypt.r = 8;
      wallet.scrypt.p = 8;
      wallet.accounts = [];
      wallet.accounts[0] = new NEL.nep6.nep6account();
      wallet.accounts[0].name = accountlabel;
      wallet.accounts[0].nep2key = that.nep2key;
      NEL.helper.Helper.GetPrivateKeyFromNep2(
        that.nep2key,
        passphrase,
        wallet.scrypt.N,
        wallet.scrypt.r,
        wallet.scrypt.p,
        (info, result) => {
          if (info === 'error') {
            tip.alert('密码错误');
            return;
          }
          console.log('result=' + 'info=' + info + ' result=' + result);
          wepy.showLoading({ title: '地址生成中' });
          let pubkey = NEL.helper.Helper.GetPublicKeyFromPrivateKey(result);
          let address = NEL.helper.Helper.GetAddressFromPublicKey(pubkey);
          console.log('address = ' + address);
          wallet.accounts[0].address = address;

          const wallet_json = wallet.toJson();
          wallets[accountlabel] = wallet_json;
          wepy.showLoading({ title: '钱包创建完成' });
          wepy.showLoading({ title: '数据存储中' });
          wepy.setStorageSync(LOCAL_WALLET, wallets);
          wepy.setStorageSync(CURR_WALLET, wallet);
          WalletHelper.wallet =  wallet.accounts[0];
          wepy.hideLoading();
          that.$redirect('./index');
        }
      );
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数
}
</script>
