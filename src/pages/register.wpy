 <style lang="less">
.form {
  width: 100%;
  align-items: center;
}

.area-uppper {
  height: 470rpx;
  width: 100%;
  background: linear-gradient(to right, #69c0fd, #a6a4fd);
  display: flex;
  flex-direction: column;
  align-items: center;
}

.upper-logo {
  width: 160rpx;
  height: 160rpx;
  margin-top: 84rpx;
  border-radius: 50%;
  background-color: white;
}

.area-medium {
  display: flex;
  flex-direction: column;
  top: 0;
  margin-top: -150rpx;
  width: 700rpx;
  box-shadow: 10px 15px 20px rgba(100, 100, 100, 0.2);
  background-color: white;
  border-radius: 5px;
  align-items: center;
  justify-content: center;
}
.medium-content {
  margin: 10rpx 0 67rpx 0;
  width: 616rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.medium-item {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  margin-top: 75rpx;
  align-items: center;
  width: 616rpx;
  border-bottom: thin solid #cccccc;
  font-family: '黑体', Helvetica, Arial, sans-serif;
  .input {
    width: 100%;
    padding-bottom: 20rpx;
    padding-left: 20rpx;
    input {
      color: #a3a3a3;
      font-size: 16px;
    }
  }
}

.area-btn {
  margin-top: 75rpx;
  width: 660rpx;
  button::after {
    border: none;
  }
}
</style>
<template>
<form bindsubmit="formSubmit" class="form">
  <view class="container">
    <view class="area-uppper">
     <image class="upper-logo" src="../images/icon.png" ></image>
    </view>
    <view class="area-medium">
      <view class="medium-content">
      <view class="medium-item">
        <view class="input">
          <input type="text" name="accountlabel" placeholder="标签" value='aaaa8'/>
        </view>
      </view>
      <view class="medium-item">
        <view class="input">
          <input type="text" name="passphrase" password placeholder="请输入密码" value='aaaa'/>
        </view>
      </view>
      <view class="medium-item">
        <view class="input">
          <input type="text" name="repassphrase" password placeholder="确认密码" value='aaaa'/>
        </view>
      </view>
      </view>
    </view>
      <view class="area-btn">
        <button type="primary" style="background-color:#69c0fd;" formType="submit">生成账户</button>
      </view>
  </view>
</form>
</template>
<script>
import wepy from 'wepy';
import {Helper} from '../lib/neo-ts/index';
import {Util} from '../utils/index';
export default class Register extends wepy.page {
  customData = {}; // 自定义数据

  customFunction() {} // 自定义方法

  onLoad() {} // 在Page和Component共用的生命周期函数

  onShow() {} // 只在Page中存在的页面生命周期函数

  config = {
    navigationBarTitleText: '新账户'
  }; // 只在Page实例中存在的配置数据，对应于原生的page.json文件

  data = {
    isGenerating: false
  }; // 页面所需数据均需在这里声明，可用于模板数据绑定

  components = {}; // 声明页面中所引用的组件，或声明组件中所引用的子组件

  mixins = []; // 声明页面所引用的Mixin实例

  computed = {}; // 声明计算属性（详见后文介绍）

  watch = {}; // 声明数据watcher（详见后文介绍）

  methods = {
    async formSubmit(e) {
      this.isGenerating = true;
      this.$apply();
      let that = this;
      let accountlabel = e.detail.value.accountlabel;
      let passphrase = e.detail.value.passphrase;
      let repassphrase = e.detail.value.repassphrase;

      if (passphrase === '' || passphrase !== repassphrase) {
        tip.alert('两次密码不同');
        return;
      }
      if (accountlabel === '') {
        tip.alert('账户名不能为空');
        return;
      }
      let wallets = wepy.getStorageSync(LOCAL_WALLET) || {};
      if (wallets[accountlabel] !== undefined) {
        tip.alert('账户名已存在');
        return;
      }

      wepy.showLoading({ title: '新钱包生成中' });

      wepy.showLoading({ title: '私钥生成中' });

      let privateKey = await Random.getSecureRandom(64);

      var wallet = WalletTool.getWallet(accountlabel, privateKey);
      console.log(wallet);

      setTimeout(function() {
        wepy.hideLoading();
      }, 1000);

      Helper.Account.GetNep2FromPrivateKey(
        Helper.hexToBytes(privateKey),
        passphrase,
        wallet.scrypt.N,
        wallet.scrypt.r,
        wallet.scrypt.p,
        (info, result) => {
          that.isGenerating = false;
          that.$apply();
          if (info == 'finish') {
            wallet.accounts[0].nep2key = result;
            const wallet_json = wallet.toJson();
            wallets[accountlabel] = wallet_json;
            console.log(wallet_json);

            wepy.showLoading({ title: '钱包创建完成' });
            wepy.setStorageSync(LOCAL_WALLET, wallets);
            //本地缓存新生成的账户
            WalletTool.setWallet(wallet);
            var jsonstr = JSON.stringify(wallet_json);
            wepy.hideLoading();
            that.$redirect('./regresult?wallet=' + jsonstr);
          } else {
            //TODO: alert for encoding error
            tip.error('私钥加密失败');
          }
        }
      );
    }
  }; // 声明页面wxml中标签的事件处理函数。注意，此处只用于声明页面wxml中标签的bind、catch事件，自定义方法需以自定义方法的方式声明

  events = {}; // 声明组件之间的事件处理函数
}
</script>
