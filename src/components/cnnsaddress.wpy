<style lang="less">
  .addr-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    background-color: white;
  }
  .nns {
    border-bottom: thin solid #a9a9a9;
    flex-direction: row;
    align-items: flex-start;
    width: 655rpx;
    margin-top: 40rpx;
    margin-bottom: 20rpx;
    text {
      font-family: PingFangSC-Medium;
      font-size: 13px;
      color: #333333;
      letter-spacing: 0;
      line-height: 14px;
      margin-bottom: 10rpx;
      align-items: center;
      width: 655rpx;
    }
    input {
      font-family: PingFangSC-Medium;
      font-size: 13px;
      color: #333333;
      letter-spacing: 0;
      line-height: 14px;
      width: 100%;
      align-content: flex-start;
      margin-bottom: 10rpx;
      padding-left: 5rpx;
    }
  }
  .addr {
    width: 90%;
    margin-bottom: 20rpx;
    .icon {
      width: 24rpx;
      height: 24rpx;
    }
    .text {
      font-family: PingFangSC-Regular;
      font-size: 12px;
      color: #a9a9a9;
      letter-spacing: 0;
      text-align: center;
      line-height: 12px;
      margin-left: 10rpx;
    }
  }
</style>

<template>
  <view class="addr-content">
    <!-- 地址/域名填写为位置 -->
    <view class="nns">
      <!-- 此组建可以直接用来展示域名，而不是输入 所以存在两种应用场景 -->
      <text wx:if="{{type=='text'}}">{{value}}</text>
      <input wx:if="{{type=='input'}}" bindinput="confirm" value="{{value}}" placeholder="address or domain" />
    </view>
    <!-- 地址所在的地方 -->
    <view class="addr" wx:if="{{showLower}}">
      <image src="../images/Pointer.png" class="icon" />
      <text class="text">{{addr}}</text>
    </view>
  </view>
</template>
<script>
  /**
  //本组件用于地址及域名的显示，逻辑
   */
  import wepy from 'wepy';
  import Util from '../utils/index';
  export default class CNNSAddress extends wepy.component {
    props = {
      address: {
        type: String,
        default: 'address',
        twoWay: true
      },
      type: {
        type: String,
        default: 'text'
      },
      value: { // 如果是域名则展示域名，如果是地址则展示地址
        type: String,
        default: ''
      },
      addrres: { //用来向外传递域名及地址解析结果 目前只有添加联系人的时候需要
        type: String,
        default: 'text',
        twoWay: true
      }
    };
    components = {};
    data = {
      addr: '', //有域名的时候底部显示的地址
      showLower: false //是否显示域名底部地址
    };
    methods = {
      showNNS(addr) {
        this.addr = addr;
        this.value = '';
        this.$apply();
      },
      confirm(e) {
        this.OnParseAddress(e.detail.value)
      },
      //由外部触发，用户选择通讯录或者扫码
      quickAddress(addr) {
        console.log(addr)
        this.value = addr;
        this.OnParseAddress(addr)
        this.$apply();
      }
    };
    async onLoadDomain(address) {
      this.showLower = false;
      console.log('is a domain');
      let domain = await Util.get.addrByDomain(address);
      console.log(domain)
      if (domain !== null && domain.maxBuyer !== null) {
        this.addr = domain['maxBuyer'];//address;
        this.showLower = true;
        this.address = domain['maxBuyer']//domain.address;
        this.addrres = JSON.stringify({
          'address': domain['maxBuyer'],
          'domain': address
        });
      } else {
        this.showLower = false;
      }
      this.$apply();
    }
    OnParseAddress(address) {
      if (address === undefined || address === '') return;
      // 判断为地址
      if (address.length === 34 && address[0] === 'A') {
        this.address = address;
        this.addrres = JSON.stringify({
          'address': address
        });
      } else if (address.length > 3 && address.includes('.neo')) {
        // 如果判断结果为domain，查找地址
        this.onLoadDomain(address);
      } else {
        return;
      }
      this.$emit('confirm', address);
      this.$apply();
    }
    async onLoad() {
      //如果是输入类型则直接返回，如果是展示类型，则解析地址类型
      if (this.type === 'input') return;
      // 没有解析到可用域名则直接显示地址
      this.value = Util.get.account().address;
      this.$apply();
      //根据地址查询与其绑定的域名
      let domains = await Util.get.myDomain(Util.get.account().address);
      if (domains === null || domains === undefined || domains.length === 0) return;
      for (let index in domains) {
        let domain = domains[index];
        console.log(domain);
        if (domain['expiring'] !== '已过期') {
          // addr为用户地址 
          this.addr = Util.get.account().address;
          //value为域名 展示第二层地址展示位
          this.value = domain.domain;
          this.showLower = true;
          this.$apply();
          return;
        }
      }
    }
  }
</script>
